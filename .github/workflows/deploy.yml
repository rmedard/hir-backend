name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP dependencies
        run: |
          composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          echo "PHP dependencies installed"

      - name: Prepare deployment files
        run: |
          mkdir -p deployment-files

          # Copy everything with standard exclusions
          if [ -f ".deployignore" ]; then
            rsync -av --exclude-from='.deployignore' ./ deployment-files/
            echo "Using .deployignore file for exclusions"
          else
            rsync -av \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment-files' \
              --exclude='node_modules' \
              --exclude='httpdocs/sites/default/files' \
              --exclude='httpdocs/sites/default/settings.local.php' \
              --exclude='httpdocs/sites/default/settings.php' \
              ./ deployment-files/
            echo "Using manual exclusions (no .deployignore found)"
          fi

          # Copy vendor
          cp -r vendor deployment-files/ 2>/dev/null || echo "Vendor directory not found"

          echo "Deployment files prepared"
          du -sh deployment-files/

      - name: Transfer files to server via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          source: "deployment-files/*"
          target: "/tmp/deployment"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            echo "=== DEPLOYING TO: $DEPLOY_PATH ==="

            # Safety checks
            if [ ! -d "$DEPLOY_PATH" ]; then
              echo "❌ Deploy path does not exist: $DEPLOY_PATH"
              exit 1
            fi

            # Backup current deployment (if exists)
            echo "Creating backup..."
            if [ -d "$DEPLOY_PATH" ]; then
              BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"
              cp -r "$DEPLOY_PATH" "$BACKUP_DIR" 2>/dev/null && echo "✅ Backup created: $BACKUP_DIR" || echo "⚠️ Backup failed, continuing..."
            fi

            # Create server-side exclusions to preserve critical files
            cat > /tmp/server-rsync-excludes.txt << 'EOF'
            httpdocs/sites/default/settings.php
            httpdocs/sites/default/settings.local.php
            httpdocs/sites/default/services.yml
            httpdocs/sites/default/files
            httpdocs/sites/default/private
            EOF

            # Sync files from temporary location to deployment path
            echo "Syncing files to deployment location (preserving server configs)..."
            rsync -av \
              --exclude-from='/tmp/server-rsync-excludes.txt' \
              --delete \
              /tmp/deployment/ $DEPLOY_PATH/

            echo "✅ Files synced, server configurations preserved"

            # Set proper permissions
            echo "Setting permissions..."
            find $DEPLOY_PATH -type d -exec chmod 755 {} \;
            find $DEPLOY_PATH -type f -exec chmod 644 {} \;

            # Set executable permissions for binaries
            echo "Setting executable permissions for binaries..."
            find $DEPLOY_PATH/vendor -name "drush" -type f -exec chmod 755 {} \;
            find $DEPLOY_PATH/vendor -name "drush.php" -type f -exec chmod 755 {} \;
            find $DEPLOY_PATH/vendor -path "*/bin/*" -type f -exec chmod 755 {} \;
            find $DEPLOY_PATH/vendor -name "*.php" -path "*/drush/*" -type f -exec chmod 755 {} \;

            # Ensure web server can write to files directory
            if [ -d "$WEBROOT_PATH/sites/default/files" ]; then
              chmod -R 775 "$WEBROOT_PATH/sites/default/files"
              echo "✅ Files directory permissions set"
            fi

            echo "✅ Permissions set"

            # Build theme assets on server after files are deployed
            echo "=== BUILDING THEME ASSETS ON SERVER ==="

            # Auto-detect Plesk Node.js installation (prefer latest version)
            PLESK_NODE=""
            PLESK_NPM=""

            # Look for Node.js 20 first (your current version)
            if [ -f "/opt/plesk/node/20/bin/node" ] && [ -f "/opt/plesk/node/20/bin/npm" ]; then
              PLESK_NODE="/opt/plesk/node/20/bin/node"
              PLESK_NPM="/opt/plesk/node/20/bin/npm"
            else
              # Auto-detect any available Plesk Node.js version
              for version in $(ls -1 /opt/plesk/node/ 2>/dev/null | sort -nr); do
                if [ -f "/opt/plesk/node/$version/bin/node" ] && [ -f "/opt/plesk/node/$version/bin/npm" ]; then
                  PLESK_NODE="/opt/plesk/node/$version/bin/node"
                  PLESK_NPM="/opt/plesk/node/$version/bin/npm"
                  echo "✅ Found Plesk Node.js version: $version"
                  break
                fi
              done
            fi

            if [ -n "$PLESK_NODE" ] && [ -n "$PLESK_NPM" ]; then
              echo "✅ Using Plesk Node.js at: $PLESK_NODE"
              echo "Node.js version: $($PLESK_NODE --version)"
              echo "npm version: $($PLESK_NPM --version)"

              # Navigate to theme directory
              cd $WEBROOT_PATH/themes/custom/houseinrwanda_theme

              # CRITICAL FIX: Set up PATH to include Plesk Node.js binaries
              export PATH="/opt/plesk/node/20/bin:$PATH"

              # Verify PATH is set correctly
              echo "PATH updated to include Plesk Node.js"
              echo "Node.js location: $(which node)"
              echo "npm location: $(which npm)"

              # Cache npm packages optimization
              echo "Installing npm dependencies..."
              if [ -d "node_modules" ]; then
                echo "Found existing node_modules, checking if update needed..."
                # Check if package-lock.json is newer than node_modules
                if [ -f "package-lock.json" ] && [ "package-lock.json" -nt "node_modules" ]; then
                  echo "Package lock file is newer, updating dependencies..."
                  rm -rf node_modules
                fi
              fi

              # Install npm dependencies (now using PATH instead of full paths)
              if [ -f "package-lock.json" ]; then
                npm ci --silent --production=false
              else
                npm install --silent
              fi
              echo "✅ npm dependencies installed"

              # Build theme assets (this creates the libraries directory)
              echo "Building theme assets including TomSelect..."

              # Capture build output for debugging
              BUILD_LOG="/tmp/theme-build.log"
              if npm run build 2>&1 | tee "$BUILD_LOG"; then
                echo "✅ Theme assets built successfully"
              else
                echo "❌ Theme build failed!"
                echo "Build output:"
                cat "$BUILD_LOG"
                exit 1
              fi

              # CRITICAL: Verify TomSelect libraries were created - hard failure if not found
              if [ -d "$WEBROOT_PATH/libraries/tom-select" ]; then
                echo "✅ TomSelect libraries found at: $WEBROOT_PATH/libraries/tom-select"
                TOMSELECT_FILES=$(ls -la $WEBROOT_PATH/libraries/tom-select/)
                echo "$TOMSELECT_FILES"

                # Verify essential files exist
                if [ -f "$WEBROOT_PATH/libraries/tom-select/tom-select.complete.min.js" ] &&
                   [ -f "$WEBROOT_PATH/libraries/tom-select/tom-select.min.css" ]; then
                  echo "✅ Essential TomSelect files verified"
                else
                  echo "❌ CRITICAL: Essential TomSelect files missing!"
                  echo "Expected files not found. Deployment failed."
                  exit 1
                fi
              else
                echo "❌ CRITICAL: TomSelect libraries not found - deployment failed!"
                echo "Debugging information:"
                echo "Libraries directory contents:"
                ls -la $WEBROOT_PATH/libraries/ 2>/dev/null || echo "No libraries directory found"
                echo "Theme directory contents:"
                ls -la $WEBROOT_PATH/themes/custom/houseinrwanda_theme/
                echo "Build log:"
                cat "$BUILD_LOG" 2>/dev/null || echo "No build log found"
                echo "Gulpfile check:"
                ls -la $WEBROOT_PATH/themes/custom/houseinrwanda_theme/gulpfile.js 2>/dev/null || echo "No gulpfile found"
                echo "Node.js PATH check:"
                echo "Current PATH: $PATH"
                echo "which node: $(which node 2>/dev/null || echo 'not found')"
                exit 1
              fi

              # Clean up build log
              rm -f "$BUILD_LOG"

            else
              echo "❌ Plesk Node.js not found"
              echo "Available Plesk Node.js versions:"
              ls -la /opt/plesk/node/ 2>/dev/null || echo "No Plesk Node.js directory found"
              exit 1
            fi

            # Drush commands
            echo "=== RUNNING DRUSH COMMANDS ==="
            cd $DEPLOY_PATH

            # Check for PHP 8.3 (matching your GitHub Actions setup)
            PHP_BINARY=""
            for php_version in php8.3 php83 php8.2 php82 php8.1 php81 php; do
              if command -v $php_version >/dev/null 2>&1; then
                PHP_VERSION_OUTPUT=$($php_version --version 2>/dev/null | head -1)
                if echo "$PHP_VERSION_OUTPUT" | grep -q "PHP 8\.[1-3]"; then
                  PHP_BINARY=$php_version
                  echo "✅ Found compatible PHP: $PHP_VERSION_OUTPUT"
                  break
                fi
              fi
            done

            if [ -z "$PHP_BINARY" ]; then
              echo "❌ No compatible PHP version found (need PHP 8.1+)"
              echo "Available PHP versions:"
              for php_check in php php8.3 php83 php8.2 php82 php8.1 php81; do
                if command -v $php_check >/dev/null 2>&1; then
                  echo "  - $php_check: $($php_check --version 2>/dev/null | head -1)"
                fi
              done
              exit 1
            fi

            # Check if Drush is available and executable
            DRUSH="$DEPLOY_PATH/vendor/drush/drush/drush"
            if [ ! -f "$DRUSH" ]; then
              echo "❌ Drush not found at expected location: $DRUSH"
              echo "Searching for Drush in vendor directory..."
              find $DEPLOY_PATH/vendor -name "drush" -type f 2>/dev/null || echo "No drush binary found"
              exit 1
            fi

            # Ensure Drush is executable
            if [ ! -x "$DRUSH" ]; then
              echo "⚠️ Drush found but not executable, fixing permissions..."
              chmod 755 "$DRUSH"
            fi

            # Create Drush wrapper that uses correct PHP version
            DRUSH_WRAPPER="/tmp/drush-wrapper"
            cat > "$DRUSH_WRAPPER" << EOF
            #!/bin/bash
            export PHP_BINARY="$PHP_BINARY"
            $PHP_BINARY $DEPLOY_PATH/vendor/drush/drush/drush.php "\$@"
            EOF
            chmod 755 "$DRUSH_WRAPPER"

            # Verify Drush works with correct PHP
            if ! $DRUSH_WRAPPER --version >/dev/null 2>&1; then
              echo "❌ Drush not working with PHP $PHP_BINARY"
              echo "Trying to run Drush version:"
              $DRUSH_WRAPPER --version 2>&1 || echo "Failed to get Drush version"
              exit 1
            fi

            echo "✅ Drush verified and ready with $PHP_BINARY"

            echo "Clearing cache..."
            if $DRUSH_WRAPPER cr; then
              echo "✅ Cache cleared"
            else
              echo "❌ Cache clear failed"
              exit 1
            fi

            echo "Importing configuration..."
            if $DRUSH_WRAPPER cim -y; then
              echo "✅ Configuration imported"
            else
              echo "❌ Configuration import failed"
              exit 1
            fi

            echo "Running database updates..."
            if $DRUSH_WRAPPER updb -y; then
              echo "✅ Database updates completed"
            else
              echo "❌ Database updates failed"
              exit 1
            fi

            echo "Final cache clear..."
            if $DRUSH_WRAPPER cr; then
              echo "✅ Final cache cleared"
            else
              echo "❌ Final cache clear failed"
              exit 1
            fi

            # Optional: Rebuild cache for better performance
            echo "Rebuilding cache for optimal performance..."
            if $DRUSH_WRAPPER cache:rebuild; then
              echo "✅ Cache rebuilt"
            else
              echo "⚠️ Cache rebuild failed, but continuing..."
            fi

            # Clean up temporary files
            echo "=== CLEANING UP ==="
            rm -rf /tmp/deployment
            rm -f /tmp/server-rsync-excludes.txt
            echo "✅ Temporary files cleaned up"

            # Final comprehensive verification
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo "Deployed to: $DEPLOY_PATH"
            echo "Web root: $WEBROOT_PATH"

            echo "Critical file checks:"
            if [ -f "$WEBROOT_PATH/sites/default/settings.php" ]; then
              echo "✅ settings.php preserved"
            else
              echo "❌ settings.php missing!"
            fi

            if [ -d "$WEBROOT_PATH/libraries/tom-select" ]; then
              echo "✅ TomSelect libraries deployed"
              FILE_COUNT=$(ls -1 $WEBROOT_PATH/libraries/tom-select/ | wc -l)
              echo "   - $FILE_COUNT files in tom-select directory"
            else
              echo "❌ TomSelect libraries missing!"
            fi

            if $DRUSH_WRAPPER status --field=bootstrap 2>/dev/null | grep -q "Successful"; then
              echo "✅ Drupal bootstrap successful"
            else
              echo "⚠️ Drupal bootstrap check failed"
            fi

            # Clean up Drush wrapper
            rm -f "$DRUSH_WRAPPER"

            echo ""
            echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉"
            echo "Site should be accessible at: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}"
