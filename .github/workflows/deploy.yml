name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Get full history for git diff

      - name: Detect precise changes
        id: check_changes
        run: |
          # Get changed files in the last commit
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "initial")

          # Check for composer.lock changes
          if echo "$CHANGED_FILES" | grep -q "composer.lock"; then
            echo "composer_lock_changed=true" >> $GITHUB_OUTPUT
          else
            echo "composer_lock_changed=false" >> $GITHUB_OUTPUT
          fi

          # Check for composer.json changes (which might affect vendor)
          if echo "$CHANGED_FILES" | grep -q "composer.json"; then
            echo "composer_json_changed=true" >> $GITHUB_OUTPUT
          else
            echo "composer_json_changed=false" >> $GITHUB_OUTPUT
          fi

          echo "Composer lock changed: ${{ steps.check_changes.outputs.composer_lock_changed }}"
          echo "Composer json changed: ${{ steps.check_changes.outputs.composer_json_changed }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          # Only run composer install if vendor doesn't exist or lock changed
          if [ ! -d "vendor" ] || [ "${{ steps.check_changes.outputs.composer_lock_changed }}" = "true" ] || [ "${{ steps.check_changes.outputs.composer_json_changed }}" = "true" ]; then
            echo "Installing dependencies (vendor missing or composer files changed)"
            composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          else
            echo "Skipping composer install (vendor exists and composer files unchanged)"
          fi

      - name: Prepare deployment artifact
        run: |
          # Create a deployment directory
          mkdir -p deployment

          # Copy all files using tar (more reliable than rsync on GitHub runners)
          tar --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment' \
              --exclude='vendor' \
              --exclude='node_modules' \
              --exclude='sites/default/files' \
              --exclude='sites/default/settings.local.php' \
              -cf - . | tar -xC deployment/

          # Copy vendor only if it exists and we should update it
          if [ -d "vendor" ] && { [ "${{ steps.check_changes.outputs.composer_lock_changed }}" = "true" ] || [ "${{ steps.check_changes.outputs.composer_json_changed }}" = "true" ]; }; then
            echo "Including vendor directory in deployment"
            cp -r vendor deployment/
          else
            echo "Skipping vendor copy (no changes to composer files)"
          fi

          # Create a manifest file for debugging
          find deployment -type f -name "*.php" | head -20 > deployment/deployment_manifest.txt

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths from secrets
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            BACKUP_DIR="/tmp/backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR

            echo "Deploying to: $DEPLOY_PATH"
            echo "Webroot: $WEBROOT_PATH"
            echo "Branch: ${{ github.ref_name }}"

            # Enable maintenance mode first
            cd $WEBROOT_PATH
            drush state:set system.maintenance_mode 1

            # Check if composer files changed
            COMPOSER_CHANGED=false
            if [ -f "$DEPLOY_PATH/composer.lock" ] && [ -f "deployment/composer.lock" ]; then
              LOCAL_HASH=$(sha256sum deployment/composer.lock | cut -d' ' -f1)
              REMOTE_HASH=$(sha256sum $DEPLOY_PATH/composer.lock | cut -d' ' -f1)
              [ "$LOCAL_HASH" != "$REMOTE_HASH" ] && COMPOSER_CHANGED=true
            else
              COMPOSER_CHANGED=true
            fi

            echo "Composer files changed: $COMPOSER_CHANGED"

            # Backup current vendor if needed
            if [ "$COMPOSER_CHANGED" = "true" ] && [ -d "$DEPLOY_PATH/vendor" ]; then
              echo "Backing up vendor directory"
              cp -r $DEPLOY_PATH/vendor $BACKUP_DIR/
            fi

            # Sync files to deploy path (excluding webroot files initially)
            echo "Syncing files to $DEPLOY_PATH..."
            rsync -av --delete \
              --exclude='httpdocs/' \
              --exclude='vendor/' \
              deployment/ $DEPLOY_PATH/

            # Sync webroot files separately
            echo "Syncing webroot files to $WEBROOT_PATH..."
            rsync -av --delete \
              --exclude='sites/default/files' \
              deployment/httpdocs/ $WEBROOT_PATH/

            # Handle vendor directory
            if [ "$COMPOSER_CHANGED" = "true" ] && [ -d "deployment/vendor" ]; then
              echo "Replacing vendor directory (composer files changed)"
              rm -rf $DEPLOY_PATH/vendor
              mv deployment/vendor $DEPLOY_PATH/
            else
              echo "Keeping existing vendor directory (no changes needed)"
            fi

            # Set proper permissions for files directory
            if [ -d "$WEBROOT_PATH/sites/default/files" ]; then
              chmod -R 755 "$WEBROOT_PATH/sites/default/files"
              echo "Set permissions for files directory: $WEBROOT_PATH/sites/default/files"
            else
              echo "Files directory not found, creating it..."
              mkdir -p "$WEBROOT_PATH/sites/default/files"
              chmod -R 755 "$WEBROOT_PATH/sites/default/files"
            fi

            # Run Drupal maintenance commands from webroot
            echo "Running Drupal maintenance..."
            cd $WEBROOT_PATH
            drush updb -y
            drush cim -y
            drush cr
            drush state:set system.maintenance_mode 0

            # Cleanup
            rm -rf deployment
            find /tmp -name "backup_*" -type d -mtime +7 -exec rm -rf {} \;

            echo "Deployment completed successfully!"
