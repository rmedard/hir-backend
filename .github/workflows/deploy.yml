name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP dependencies
        run: |
          composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          echo "PHP dependencies installed"

      - name: Prepare deployment files
        run: |
          mkdir -p deployment-files

          # Copy everything with standard exclusions
          if [ -f ".deployignore" ]; then
            rsync -av --exclude-from='.deployignore' ./ deployment-files/
            echo "Using .deployignore file for exclusions"
          else
            rsync -av \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment-files' \
              --exclude='node_modules' \
              --exclude='httpdocs/sites/default/files' \
              --exclude='httpdocs/sites/default/settings.local.php' \
              --exclude='httpdocs/sites/default/settings.php' \
              ./ deployment-files/
            echo "Using manual exclusions (no .deployignore found)"
          fi

          # Copy vendor
          cp -r vendor deployment-files/ 2>/dev/null || echo "Vendor directory not found"

          echo "Deployment files prepared"
          du -sh deployment-files/

      - name: Transfer files to server via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          source: "deployment-files/*"
          target: "/tmp/deployment"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            echo "=== DEPLOYING TO: $DEPLOY_PATH ==="

            # Safety checks
            if [ ! -d "$DEPLOY_PATH" ]; then
              echo "❌ Deploy path does not exist: $DEPLOY_PATH"
              exit 1
            fi

            # Backup current deployment (if exists)
            echo "Creating backup..."
            if [ -d "$DEPLOY_PATH" ]; then
              BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"
              cp -r "$DEPLOY_PATH" "$BACKUP_DIR" 2>/dev/null && echo "✅ Backup created: $BACKUP_DIR" || echo "⚠️ Backup failed, continuing..."
            fi

            # Create server-side exclusions to preserve critical files
            cat > /tmp/server-rsync-excludes.txt << 'EOF'
            httpdocs/sites/default/settings.php
            httpdocs/sites/default/settings.local.php
            httpdocs/sites/default/services.yml
            httpdocs/sites/default/files
            httpdocs/sites/default/private
            EOF

            # Sync files from temporary location to deployment path
            echo "Syncing files to deployment location (preserving server configs)..."
            rsync -av \
              --exclude-from='/tmp/server-rsync-excludes.txt' \
              --delete \
              /tmp/deployment/ $DEPLOY_PATH/

            echo "✅ Files synced, server configurations preserved"

            # Set proper permissions
            echo "Setting permissions..."
            find $DEPLOY_PATH -type d -exec chmod 755 {} \;
            find $DEPLOY_PATH -type f -exec chmod 644 {} \;

            # Ensure web server can write to files directory
            if [ -d "$WEBROOT_PATH/sites/default/files" ]; then
              chmod -R 775 "$WEBROOT_PATH/sites/default/files"
              echo "✅ Files directory permissions set"
            fi

            echo "✅ Permissions set"

            # Build theme assets on server after files are deployed
            echo "=== BUILDING THEME ASSETS ON SERVER ==="

            # Check if Node.js is available
            if command -v node >/dev/null 2>&1; then
              echo "Node.js version: $(node --version)"

              # Navigate to theme directory
              cd $WEBROOT_PATH/themes/custom/houseinrwanda_theme

              # Install npm dependencies (optimized with cache)
              echo "Installing npm dependencies..."
              if [ -f "package-lock.json" ]; then
                # Use npm ci for faster, reliable installs in production
                npm ci --silent --production=false
              else
                # Fallback to npm install if no lock file
                npm install --silent
              fi
              echo "✅ npm dependencies installed"

              # Build theme assets (this creates the libraries directory)
              echo "Building theme assets including TomSelect..."
              npm run build --silent
              echo "✅ Theme assets built"

              # Verify TomSelect libraries were created
              if [ -d "$WEBROOT_PATH/libraries/tom-select" ]; then
                echo "✅ TomSelect libraries found at: $WEBROOT_PATH/libraries/tom-select"
                ls -la $WEBROOT_PATH/libraries/tom-select/
              else
                echo "❌ TomSelect libraries not found!"
                echo "Contents of libraries directory:"
                ls -la $WEBROOT_PATH/libraries/ 2>/dev/null || echo "No libraries directory found"
              fi

            else
              echo "❌ Node.js not found on server - theme assets not built"
              echo "Please install Node.js on the server or use alternative approach"
              exit 1
            fi

            # Drush commands
            echo "=== RUNNING DRUSH COMMANDS ==="
            cd $DEPLOY_PATH

            # Check if Drush is available
            if [ ! -f "$DEPLOY_PATH/vendor/drush/drush/drush" ]; then
              echo "❌ Drush not found at expected location"
              exit 1
            fi

            DRUSH="$DEPLOY_PATH/vendor/drush/drush/drush"

            echo "Clearing cache..."
            $DRUSH cr
            echo "✅ Cache cleared"

            echo "Importing configuration..."
            $DRUSH cim -y
            echo "✅ Configuration imported"

            echo "Running database updates..."
            $DRUSH updb -y
            echo "✅ Database updates completed"

            echo "Final cache clear..."
            $DRUSH cr
            echo "✅ Final cache cleared"

            # Optional: Rebuild cache for better performance
            echo "Rebuilding cache for optimal performance..."
            $DRUSH cache:rebuild
            echo "✅ Cache rebuilt"

            # Clean up temporary files
            echo "=== CLEANING UP ==="
            rm -rf /tmp/deployment
            rm -f /tmp/server-rsync-excludes.txt
            echo "✅ Temporary files cleaned up"

            # Final verification
            echo "=== DEPLOYMENT VERIFICATION ==="
            echo "Deployed to: $DEPLOY_PATH"
            echo "Web root: $WEBROOT_PATH"
            echo "Theme libraries:"
            ls -la $WEBROOT_PATH/libraries/tom-select/ 2>/dev/null || echo "❌ TomSelect not found"

            echo ""
            echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉"
            echo "Site should be accessible at: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}"
