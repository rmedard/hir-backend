name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          echo "Dependencies installed"

      - name: Prepare deployment files
        run: |
          mkdir -p deployment-files

          # Copy all files except excluded ones, using .deployignore if it exists
          if [ -f ".deployignore" ]; then
            rsync -av --exclude-from='.deployignore' ./ deployment-files/
            echo "Using .deployignore file for exclusions"
          else
            # Fallback to manual exclusions if .deployignore doesn't exist
            rsync -av \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment-files' \
              --exclude='node_modules' \
              --exclude='sites/default/files' \
              --exclude='sites/default/settings.local.php' \
              --exclude='sites/default/settings.php' \
              ./ deployment-files/
            echo "Using manual exclusions (no .deployignore found)"
          fi

          # Copy vendor
          cp -r vendor deployment-files/ 2>/dev/null || echo "Vendor directory not found"

          echo "Deployment files prepared"
          du -sh deployment-files/

      - name: Transfer files to server via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          source: "deployment-files/*"
          target: "/tmp/deployment"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            echo "=== DEPLOYING TO: $DEPLOY_PATH ==="

            # Create backup of critical files
            BACKUP_DIR="/tmp/backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            echo "Backup directory: $BACKUP_DIR"

            # Backup critical files that should be preserved
            if [ -f "$WEBROOT_PATH/sites/default/settings.php" ]; then
              cp "$WEBROOT_PATH/sites/default/settings.php" "$BACKUP_DIR/"
              echo "Backed up settings.php"
            fi

            if [ -f "$WEBROOT_PATH/sites/default/settings.local.php" ]; then
              cp "$WEBROOT_PATH/sites/default/settings.local.php" "$BACKUP_DIR/"
              echo "Backed up settings.local.php"
            fi

            # Backup existing vendor if it exists
            if [ -d "$DEPLOY_PATH/vendor" ]; then
              cp -r "$DEPLOY_PATH/vendor" "$BACKUP_DIR/" 2>/dev/null || true
            fi

            # Sync files (main deployment) - REMOVED --delete flag and added exclusions
            echo "Syncing files to deployment path..."
            rsync -av \
              --exclude='httpdocs/' \
              --exclude='sites/default/files' \
              --exclude='sites/default/settings.php' \
              --exclude='sites/default/settings.local.php' \
              --exclude='tmp' \
              --exclude='private' \
              --exclude='logs' \
              /tmp/deployment/ $DEPLOY_PATH/

            # Sync webroot files - REMOVED --delete flag and added exclusions
            echo "Syncing webroot files..."
            rsync -av \
              --exclude='sites/default/files' \
              --exclude='sites/default/settings.php' \
              --exclude='sites/default/settings.local.php' \
              --exclude='tmp' \
              --exclude='private' \
              --exclude='logs' \
              /tmp/deployment/httpdocs/ $WEBROOT_PATH/

            # Handle vendor directory
            if [ -d "/tmp/deployment/vendor" ]; then
              echo "Updating vendor directory..."
              rm -rf "$DEPLOY_PATH/vendor" 2>/dev/null || true
              cp -r "/tmp/deployment/vendor" "$DEPLOY_PATH/"
            fi

            # Restore critical files
            if [ -f "$BACKUP_DIR/settings.php" ]; then
              cp "$BACKUP_DIR/settings.php" "$WEBROOT_PATH/sites/default/"
              echo "Restored settings.php"
            fi

            if [ -f "$BACKUP_DIR/settings.local.php" ]; then
              cp "$BACKUP_DIR/settings.local.php" "$WEBROOT_PATH/sites/default/"
              echo "Restored settings.local.php"
            fi

            # Ensure critical directories exist
            mkdir -p "$WEBROOT_PATH/sites/default/files" 2>/dev/null || true
            mkdir -p "$WEBROOT_PATH/tmp" 2>/dev/null || true
            mkdir -p "$WEBROOT_PATH/private" 2>/dev/null || true

            # Set file permissions
            echo "Setting file permissions..."
            find $DEPLOY_PATH -type d -exec chmod 755 {} \; 2>/dev/null || true
            find $DEPLOY_PATH -type f -exec chmod 644 {} \; 2>/dev/null || true

            # Special permissions for files directory and other writable directories
            if [ -d "$WEBROOT_PATH/sites/default/files" ]; then
              chmod -R 775 "$WEBROOT_PATH/sites/default/files" 2>/dev/null || true
            fi

            if [ -d "$WEBROOT_PATH/tmp" ]; then
              chmod -R 775 "$WEBROOT_PATH/tmp" 2>/dev/null || true
            fi

            if [ -d "$WEBROOT_PATH/private" ]; then
              chmod -R 775 "$WEBROOT_PATH/private" 2>/dev/null || true
            fi

            # Protect settings files
            if [ -f "$WEBROOT_PATH/sites/default/settings.php" ]; then
              chmod 644 "$WEBROOT_PATH/sites/default/settings.php"
            fi

            # Run Drupal maintenance
            echo "Running Drupal maintenance commands..."
            cd $WEBROOT_PATH

            # Find available PHP and Drush
            PHP_PATH=$(which php 2>/dev/null || echo "/opt/plesk/php/8.3/bin/php")
            DRUSH_PATH=$(which drush 2>/dev/null || echo "/usr/lib/plesk-9.0/drush/drush.php")

            # Run maintenance commands with error handling
            $PHP_PATH $DRUSH_PATH state:set system.maintenance_mode 1 2>/dev/null || echo "Maintenance mode set failed"
            $PHP_PATH $DRUSH_PATH updb -y 2>/dev/null || echo "Database update failed"
            $PHP_PATH $DRUSH_PATH cim -y 2>/dev/null || echo "Config import failed"
            $PHP_PATH $DRUSH_PATH cr 2>/dev/null || echo "Cache rebuild failed"
            $PHP_PATH $DRUSH_PATH state:set system.maintenance_mode 0 2>/dev/null || echo "Maintenance mode disable failed"

            # Cleanup
            rm -rf /tmp/deployment
            echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="
            echo "Site URL: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}"
