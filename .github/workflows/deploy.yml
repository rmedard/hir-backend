name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Get full history for git diff

      - name: Detect precise changes
        id: check_changes
        run: |
          # Get changed files in the last commit
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "initial")

          # Check for composer.lock changes
          if echo "$CHANGED_FILES" | grep -q "composer.lock"; then
            echo "composer_lock_changed=true" >> $GITHUB_OUTPUT
          else
            echo "composer_lock_changed=false" >> $GITHUB_OUTPUT
          fi

          # Check for composer.json changes (which might affect vendor)
          if echo "$CHANGED_FILES" | grep -q "composer.json"; then
            echo "composer_json_changed=true" >> $GITHUB_OUTPUT
          else
            echo "composer_json_changed=false" >> $GITHUB_OUTPUT
          fi

          echo "Composer lock changed: ${{ steps.check_changes.outputs.composer_lock_changed }}"
          echo "Composer json changed: ${{ steps.check_changes.outputs.composer_json_changed }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          # Only run composer install if vendor doesn't exist or lock changed
          if [ ! -d "vendor" ] || [ "${{ steps.check_changes.outputs.composer_lock_changed }}" = "true" ] || [ "${{ steps.check_changes.outputs.composer_json_changed }}" = "true" ]; then
            echo "Installing dependencies (vendor missing or composer files changed)"
            composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          else
            echo "Skipping composer install (vendor exists and composer files unchanged)"
          fi

      - name: Prepare deployment artifact
        run: |
          # Create a structured deployment artifact
          mkdir -p deployment-artifact

          # Copy all files to maintain structure
          tar --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment-artifact' \
              --exclude='vendor' \
              --exclude='node_modules' \
              --exclude='sites/default/files' \
              -cf - . | tar -xC deployment-artifact/

          # Copy vendor if needed
          if [ -d "vendor" ] && { [ "${{ steps.check_changes.outputs.composer_lock_changed }}" = "true" ] || [ "${{ steps.check_changes.outputs.composer_json_changed }}" = "true" ]; }; then
            echo "Including vendor directory in deployment"
            cp -r vendor deployment-artifact/
          fi

          # Create tar archive for transfer
          tar -czf deployment.tar.gz -C deployment-artifact .

          echo "Deployment artifact created: $(du -sh deployment.tar.gz)"

      - name: Debug - Check deployment artifact
        run: |
          echo "Deployment artifact structure:"
          find deployment-artifact -type f -name "*.php" | head -10
          echo "Vendor directory exists: $(if [ -d "deployment-artifact/vendor" ]; then echo 'YES'; else echo 'NO'; fi)"
          ls -la deployment-artifact/ | head -10

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            echo "=== DEBUG: START ==="
            echo "Deploying to: $STAGING_PATH"
            echo "Webroot: $WEBROOT_PATH"

            # Check current permissions
            echo "Current ownership:"
            ls -la $STAGING_PATH/ | head -5
            echo "Webroot ownership:"
            ls -la $WEBROOT_PATH/ 2>/dev/null | head -5 || echo "Webroot not accessible"

            # Check what hirusr can access
            echo "hirusr permissions test:"
            touch $STAGING_PATH/test_hirusr.txt 2>/dev/null && echo "✓ Can write to deploy path" || echo "✗ Cannot write to deploy path"
            touch $WEBROOT_PATH/test_hirusr.txt 2>/dev/null && echo "✓ Can write to webroot" || echo "✗ Cannot write to webroot"
            rm -f $STAGING_PATH/test_hirusr.txt $WEBROOT_PATH/test_hirusr.txt 2>/dev/null

            echo "=== DEBUG: END ==="


            BACKUP_DIR="/tmp/backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR

            echo "Deploying to: $DEPLOY_PATH"
            echo "Webroot: $WEBROOT_PATH"

            # Transfer the deployment artifact
            echo "Transferring deployment artifact..."
            tar -xzf - -C /tmp << 'TAR_EOF'
            {{!!This will be replaced with actual tar data during execution!!}}
            TAR_EOF

            # Backup current deployment
            echo "Backing up current deployment..."
            tar -czf $BACKUP_DIR/backup.tar.gz -C $DEPLOY_PATH . 2>/dev/null || true

            # Check composer changes by comparing lock files
            COMPOSER_CHANGED=false
            if [ -f "$DEPLOY_PATH/composer.lock" ] && [ -f "/tmp/deployment-artifact/composer.lock" ]; then
              if ! cmp -s "$DEPLOY_PATH/composer.lock" "/tmp/deployment-artifact/composer.lock"; then
                COMPOSER_CHANGED=true
              fi
            else
              COMPOSER_CHANGED=true
            fi

            # Handle vendor directory
            if [ "$COMPOSER_CHANGED" = "true" ]; then
              echo "Composer files changed, updating vendor..."
              if [ -d "$DEPLOY_PATH/vendor" ]; then
                mv "$DEPLOY_PATH/vendor" "$BACKUP_DIR/vendor"
              fi
            fi

            # Sync files (excluding vendor and webroot initially)
            echo "Syncing files..."
            rsync -av --delete \
              --exclude='vendor/' \
              --exclude='httpdocs/' \
              /tmp/deployment-artifact/ $DEPLOY_PATH/

            # Sync webroot files
            echo "Syncing webroot files..."
            rsync -av --delete \
              --exclude='sites/default/files' \
              /tmp/deployment-artifact/httpdocs/ $WEBROOT_PATH/

            # Handle vendor
            if [ "$COMPOSER_CHANGED" = "true" ] && [ -d "/tmp/deployment-artifact/vendor" ]; then
              echo "Updating vendor directory..."
              rm -rf "$DEPLOY_PATH/vendor"
              mv "/tmp/deployment-artifact/vendor" "$DEPLOY_PATH/vendor"
            fi

            # Set permissions (as psaserv user if needed)
            echo "Setting permissions..."
            if [ -d "$WEBROOT_PATH/sites/default/files" ]; then
              chmod -R 755 "$WEBROOT_PATH/sites/default/files" || true
            fi

            # Run Drush commands from webroot
            echo "Running Drupal maintenance..."
            cd $WEBROOT_PATH

            # Use direct PHP for Drush to avoid autoload issues
            /opt/plesk/php/8.3/bin/php /usr/lib/plesk-9.0/drush/drush.php state:set system.maintenance_mode 1
            /opt/plesk/php/8.3/bin/php /usr/lib/plesk-9.0/drush/drush.php updb -y
            /opt/plesk/php/8.3/bin/php /usr/lib/plesk-9.0/drush/drush.php cim -y
            /opt/plesk/php/8.3/bin/php /usr/lib/plesk-9.0/drush/drush.php cr
            /opt/plesk/php/8.3/bin/php /usr/lib/plesk-9.0/drush/drush.php state:set system.maintenance_mode 0

            # Cleanup
            rm -rf /tmp/deployment-artifact
            echo "Deployment completed successfully!"
