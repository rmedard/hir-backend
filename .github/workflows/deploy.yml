name: Build & Deploy HouseInRwanda

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: ${{ github.ref_name == 'main' && 'https://www.houseinrwanda.com' || 'https://dev.houseinrwanda.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pdo_mysql, json, gd, mbstring, zip
          tools: composer:v2

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: httpdocs/themes/custom/houseinrwanda_theme/package-lock.json

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Cache Node modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: themes/custom/houseinrwanda_theme/node_modules
          key: ${{ runner.os }}-node-20-${{ hashFiles('themes/custom/houseinrwanda_theme/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-

      - name: Install PHP dependencies
        run: |
          composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
          echo "PHP dependencies installed"

      - name: Install and build theme assets
        run: |
          # Build houseinrwanda_theme assets
          echo "Building houseinrwanda_theme assets with Node.js $(node --version)..."
          cd themes/custom/houseinrwanda_theme

          # Install npm dependencies
          npm ci --silent
          echo "✓ npm dependencies installed"

          # Build assets (check for common build scripts)
          if [ -f "package.json" ]; then
            # Check for build script
            if npm run | grep -q "build"; then
              npm run build --silent
              echo "✓ Built assets using 'npm run build'"
            # Check for dev script (common alternative)
            elif npm run | grep -q "dev"; then
              npm run dev --silent
              echo "✓ Built assets using 'npm run dev'"
            # Check for production script
            elif npm run | grep -q "production"; then
              npm run production --silent
              echo "✓ Built assets using 'npm run production'"
            # Check for prod script
            elif npm run | grep -q "prod"; then
              npm run prod --silent
              echo "✓ Built assets using 'npm run prod'"
            else
              echo "⚠ No build script found in package.json, available scripts:"
              npm run
            fi
          else
            echo "⚠ No package.json found in themes/custom/houseinrwanda_theme/"
          fi

          # Go back to root directory
          cd ../../..
          echo "Theme build completed"

      - name: Prepare deployment files
        run: |
          mkdir -p deployment-files

          # Copy all files except excluded ones, using .deployignore if it exists
          if [ -f ".deployignore" ]; then
            rsync -av --exclude-from='.deployignore' ./ deployment-files/
            echo "Using .deployignore file for exclusions"
          else
            # Fallback to manual exclusions if .deployignore doesn't exist
            rsync -av \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='deployment-files' \
              --exclude='node_modules' \
              --exclude='sites/default/files' \
              --exclude='sites/default/settings.local.php' \
              --exclude='sites/default/settings.php' \
              ./ deployment-files/
            echo "Using manual exclusions (no .deployignore found)"
          fi

          # Copy vendor
          cp -r vendor deployment-files/ 2>/dev/null || echo "Vendor directory not found"

          echo "Deployment files prepared"
          du -sh deployment-files/
          echo "Theme built assets:"
          ls -la themes/custom/houseinrwanda_theme/dist/ 2>/dev/null || echo "No dist directory found"
          ls -la themes/custom/houseinrwanda_theme/build/ 2>/dev/null || echo "No build directory found"

      - name: Transfer files to server via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          source: "deployment-files/*"
          target: "/tmp/deployment"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.ref_name == 'main' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.ref_name == 'main' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.ref_name == 'main' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            # Set deployment paths
            if [ "${{ github.ref_name }}" = "main" ]; then
              DEPLOY_PATH="${{ secrets.PRODUCTION_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            else
              DEPLOY_PATH="${{ secrets.STAGING_DEPLOY_PATH }}"
              WEBROOT_PATH="$DEPLOY_PATH/httpdocs"
            fi

            echo "=== DEPLOYING TO: $DEPLOY_PATH ==="

            # [Rest of your existing deployment script remains unchanged]
            # Safety checks, backup, rsync, permissions, Drush commands, etc.
            # ... (your existing deployment script continues here)
